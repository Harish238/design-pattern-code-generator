AbstractFactory {
  entryClass : "MyApp"
  clientClass : "Client"
  factoryClass : "Factory"
  factoryInterface : "AbstractFactory"
  productAClass : "ProductA"
  productBClass : "ProductB"
}

Builder {
  directorClass : "Director"
  builderClass : "Builder"
  complexObjectClass : "ComplexObject"
  productInterface : "Product"
  productAClass : "ProductA"
  productBClass : "ProductB"
}

Factory {
  creatorClass : "Creator"
  subCreatorClass : "Creator1"
  productInterface : "Product"
  productAClass : "ProductA"
}

Facade {
  facadeClass : "Facade"
  facadeSubClass : "Facade1"
  class1 : "Class1"
  method1 : "operation1"
  class2 : "Class2"
  method2 : "operation2"
  class3 : "Class3"
  method3 : "operation3"
}

ChainOfResponsibility {
  senderClass : "Sender"
  handlerClass : "Handler"
  receiver1Class : "Receiver1"
  receiver2Class : "Receiver2"
}

Mediator {
  mediatorInterface : "Mediator"
  mediatorClass : "Mediator1"
  colleagueAbstractClass : "Colleague"
  colleague1Class : "Colleague1"
  colleague2Class : "Colleague2"
}